import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, BotCommand
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.state import StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# üîë –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞
TOKEN = '8296841853:AAGKqsoUJfA4Yr3A63vnNq4EyZ1gWtadeHc'
ADMIN_ID = 5545026621  # —Ç–≤–æ–π Telegram ID

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class GameStates(StatesGroup):
    waiting = State()
    playing = State()
    withdraw_amount = State()
    set_name = State()
    give_ar_user = State()  # –î–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∫–∞/username
    give_ar_amount = State()  # –î–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ê—Ä

# -------------------- –ë–ê–ó–ê –î–ê–ù–ù–´–• --------------------

def init_db():
    conn = sqlite3.connect('game.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY,
                  username TEXT,
                  custom_name TEXT,
                  points INTEGER DEFAULT 0)''')
    c.execute('''CREATE TABLE IF NOT EXISTS withdraw_requests
                 (request_id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  amount INTEGER,
                  status TEXT DEFAULT 'pending',
                  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

def add_or_update_user(user_id, username):
    conn = sqlite3.connect('game.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, username, custom_name, points) VALUES (?, ?, ?, 0)",
              (user_id, username, None))
    c.execute("UPDATE users SET username = ? WHERE user_id = ?", (username, user_id))
    conn.commit()
    conn.close()

def get_user_points(user_id):
    conn = sqlite3.connect('game.db')
    c = conn.cursor()
    c.execute("SELECT points FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else 0

def update_points(user_id, increment):
    conn = sqlite3.connect('game.db')
    c = conn.cursor()
    c.execute("UPDATE users SET points = points + ? WHERE user_id = ?", (increment, user_id))
    conn.commit()
    conn.close()

def get_user_custom_name(user_id):
    conn = sqlite3.connect('game.db')
    c = conn.cursor()
    c.execute("SELECT custom_name FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

def set_user_custom_name(user_id, custom_name):
    conn = sqlite3.connect('game.db')
    c = conn.cursor()
    c.execute("UPDATE users SET custom_name = ? WHERE user_id = ?", (custom_name, user_id))
    conn.commit()
    conn.close()

def find_user_by_name(name):
    conn = sqlite3.connect('game.db')
    c = conn.cursor()
    # –ò—â–µ–º –ø–æ custom_name –∏–ª–∏ username (–±–µ–∑ @ –¥–ª—è username)
    name = name.lstrip('@')
    c.execute("SELECT user_id, custom_name, username FROM users WHERE custom_name = ? OR username = ?",
              (name, name))
    result = c.fetchone()
    conn.close()
    return result  # (user_id, custom_name, username) –∏–ª–∏ None

def create_withdraw_request(user_id, amount):
    conn = sqlite3.connect('game.db')
    c = conn.cursor()
    c.execute("INSERT INTO withdraw_requests (user_id, amount) VALUES (?, ?)", (user_id, amount))
    request_id = c.lastrowid
    conn.commit()
    conn.close()
    return request_id

def get_requests(status_filter='all'):
    conn = sqlite3.connect('game.db')
    c = conn.cursor()
    query = """
        SELECT r.request_id, r.user_id, u.custom_name, u.username, r.amount, r.status, r.timestamp
        FROM withdraw_requests r
        JOIN users u ON r.user_id = u.user_id
    """
    if status_filter != 'all':
        query += " WHERE r.status = ?"
        c.execute(query, (status_filter,))
    else:
        c.execute(query)
    results = c.fetchall()
    conn.close()
    return results

def update_request_status(request_id, status):
    conn = sqlite3.connect('game.db')
    c = conn.cursor()
    c.execute("UPDATE withdraw_requests SET status = ? WHERE request_id = ?", (status, request_id))
    conn.commit()
    conn.close()

def get_request_user_id(request_id):
    conn = sqlite3.connect('game.db')
    c = conn.cursor()
    c.execute("SELECT user_id, amount FROM withdraw_requests WHERE request_id = ?", (request_id,))
    result = c.fetchone()
    conn.close()
    return result if result else (None, None)

# -------------------- –£–°–¢–ê–ù–û–í–ö–ê –ö–û–ú–ê–ù–î --------------------

async def set_bot_commands():
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"),
        BotCommand(command="/profile", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –ê—Ä"),
        BotCommand(command="/setname", description="–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫"),
        BotCommand(command="/withdraw", description="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥ –ê—Ä"),
        BotCommand(command="/info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ"),
        BotCommand(command="/help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
    ]
    admin_commands = commands + [
        BotCommand(command="/requests", description="–¢–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ (–∞–¥–º–∏–Ω)"),
        BotCommand(command="/requests_list", description="–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ (–∞–¥–º–∏–Ω)"),
        BotCommand(command="/give_ar", description="–í—ã–¥–∞—Ç—å –ê—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)")
    ]
    await bot.set_my_commands(commands)
    await bot.set_my_commands(admin_commands, scope=types.BotCommandScopeChat(chat_id=ADMIN_ID))

# -------------------- –•–ï–ù–î–õ–ï–†–´ --------------------

@dp.message(Command('start'))
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    add_or_update_user(user_id, username)

    custom_name = get_user_custom_name(user_id)
    if not custom_name:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –£–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å –≤ –∏–≥—Ä–µ (–≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫):")
        await state.set_state(GameStates.set_name)
        return

    points = get_user_points(user_id)
    await message.answer(
        f"üé≤ –ü—Ä–∏–≤–µ—Ç, {custom_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–£–≥–∞–¥–∞–π –∫—É–±–∏–∫'!\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –ò–≥—Ä–∞ —Å—Ç–æ–∏—Ç 1 –ê—Ä üíé –∑–∞ –ø–æ–ø—ã—Ç–∫—É.\n"
        "- –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.\n"
        "- –ï—Å–ª–∏ —É–≥–∞–¥–∞–µ—à—å, –ê—Ä –Ω–µ —Å–Ω–∏–º–∞–µ—Ç—Å—è –∏ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å +1 –ê—Ä!\n\n"
        f"–¢–≤–æ–∏ –ê—Ä: {points} üíé\n\n"
        "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    await state.set_state(GameStates.waiting)

@dp.message(Command('profile'))
async def profile_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    add_or_update_user(user_id, username)

    custom_name = get_user_custom_name(user_id) or "‚ùå –Ω–µ –∑–∞–¥–∞–Ω"
    points = get_user_points(user_id)

    await message.answer(
        f"üìä –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è (–Ω–∏–∫): {custom_name}\n"
        f"Telegram: {username}\n"
        f"–ê—Ä: {points} üíé\n\n"
        "–ò–∑–º–µ–Ω–∏ –Ω–∏–∫: /setname"
    )

@dp.message(Command('info'))
async def info_handler(message: Message):
    info_text = (
        "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É ¬´–£–≥–∞–¥–∞–π –∫—É–±–∏–∫¬ª!\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç - Arti55_PrOFi228\n\n"
        "–≠—Ç–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ Axolotl.\n"
        "–í—Å—è –≤–∞–ª—é—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç–µ, ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Minecraft.\n\n"
        "–í—ã–∏–≥—Ä—ã—à–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π —Å—á–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n\n"
        "–ù–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–ª–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π –∑–¥–µ—Å—å –Ω–µ—Ç.\n\n"
        "–ò–≥—Ä–∞–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –≤ —Ä–∞–º–∫–∞—Ö –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞!\n\n"
        "–£–¥–∞—á–∏! –ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –∏–≥—Ä–µ! ‚ú®"
    )
    await message.answer(info_text)

@dp.message(Command('help'))
async def help_handler(message: Message):
    help_text = (
        "üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É.\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ê—Ä.\n"
        "/setname - –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫.\n"
        "/withdraw - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥ –ê—Ä.\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n\n"
        "–í –∏–≥—Ä–µ: –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å –∫—É–±–∏–∫ üé≤\n"
        "–ò–≥—Ä–∞ —Å—Ç–æ–∏—Ç 1 –ê—Ä –∑–∞ –ø–æ–ø—ã—Ç–∫—É, –Ω–æ –µ—Å–ª–∏ —É–≥–∞–¥–∞–µ—à—å, –ê—Ä –Ω–µ —Å–Ω–∏–º–∞–µ—Ç—Å—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è +1!"
    )
    if message.from_user.id == ADMIN_ID:
        help_text += (
            "\n\n–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
            "/requests - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ (pending).\n"
            "/requests_list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏).\n"
            "/give_ar - –í—ã–¥–∞—Ç—å –ê—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        )
    await message.answer(help_text)

@dp.message(Command('setname'))
async def change_name_handler(message: Message, state: FSMContext):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫ (–æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(GameStates.set_name)

@dp.message(StateFilter(GameStates.set_name))
async def set_name_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    custom_name = message.text.strip()

    if len(custom_name) < 3 or len(custom_name) > 20:
        await message.answer("‚ö†Ô∏è –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        return

    set_user_custom_name(user_id, custom_name)
    points = get_user_points(user_id)
    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –Ω–∏–∫ —Ç–µ–ø–µ—Ä—å: {custom_name}\n\n"
        f"–£ —Ç–µ–±—è {points} üíé –ê—Ä.\n"
        "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å üé≤"
    )
    await state.set_state(GameStates.waiting)

@dp.message(Command('withdraw'))
async def withdraw_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    points = get_user_points(user_id)
    if points <= 0:
        await message.answer("üòî –£ —Ç–µ–±—è –Ω–µ—Ç –ê—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞!")
        return

    await message.answer(
        f"üí∞ –í—ã–≤–æ–¥ –ê—Ä:\n"
        f"–¢–≤–æ–∏ –ê—Ä: {points} üíé\n"
        f"–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê—Ä, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏:"
    )
    await state.set_state(GameStates.withdraw_amount)

@dp.message(Command('give_ar'))
async def give_ar_handler(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    await message.answer("üë§ –í–≤–µ–¥–∏ –Ω–∏–∫ –∏–ª–∏ Telegram-username (—Å @ –∏–ª–∏ –±–µ–∑) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(GameStates.give_ar_user)

@dp.message(StateFilter(GameStates.give_ar_user))
async def give_ar_user_handler(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        await state.clear()
        return

    name = message.text.strip()
    user_data = find_user_by_name(name)
    if not user_data:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –∏–ª–∏ username –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        return

    user_id, custom_name, username = user_data
    await state.update_data(give_ar_user_id=user_id, give_ar_custom_name=custom_name or username)
    await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {custom_name or username}\n–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê—Ä –¥–ª—è –≤—ã–¥–∞—á–∏:")
    await state.set_state(GameStates.give_ar_amount)

@dp.message(StateFilter(GameStates.give_ar_amount))
async def give_ar_amount_handler(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        await state.clear()
        return

    try:
        amount = int(message.text.strip())
        if amount < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
            return
    except ValueError:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    user_id = data.get('give_ar_user_id')
    custom_name = data.get('give_ar_custom_name')

    if not user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /give_ar.")
        await state.clear()
        return

    update_points(user_id, amount)
    new_points = get_user_points(user_id)

    try:
        await bot.send_message(
            user_id,
            f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–¥–∞–ª–∞ —Ç–µ–±–µ {amount} –ê—Ä! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {new_points} üíé."
        )
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

    await message.answer(
        f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} –ê—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {custom_name}!\n"
        f"–ò—Ö —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_points} üíé"
    )
    await state.clear()

@dp.message(Command('requests'))
async def requests_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    pending_requests = get_requests(status_filter='pending')
    if not pending_requests:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥.")
        return

    for req in pending_requests:
        request_id, user_id, custom_name, username, amount, status, timestamp = req
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{request_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_id}")
            ]
        ])
        await message.answer(
            f"üîî –ó–∞–ø—Ä–æ—Å #{request_id}:\n"
            f"–ò–≥—Ä–æ–∫: {custom_name or '‚Äî'}\n"
            f"Telegram: @{username if username else '‚Äî'} (ID: {user_id})\n"
            f"–°—É–º–º–∞: {amount} üíé\n"
            f"–í—Ä–µ–º—è: {timestamp}\n",
            reply_markup=keyboard
        )

@dp.message(Command('requests_list'))
async def requests_list_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="Pending", callback_data="filter_pending"),
            InlineKeyboardButton(text="Approved", callback_data="filter_approved"),
            InlineKeyboardButton(text="Rejected", callback_data="filter_rejected"),
            InlineKeyboardButton(text="All", callback_data="filter_all")
        ]
    ])
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('filter_'))
async def process_filter_callback(callback_query: CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    filter_type = callback_query.data.split('_')[1]
    requests = get_requests(status_filter=filter_type)

    if not requests:
        await callback_query.message.answer(f"üì≠ –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{filter_type}'.")
        await callback_query.answer()
        return

    for req in requests:
        request_id, user_id, custom_name, username, amount, status, timestamp = req
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{request_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_id}")
            ]
        ]) if status == 'pending' else None
        await callback_query.message.answer(
            f"üìã –ó–∞–ø—Ä–æ—Å #{request_id}:\n"
            f"–ò–≥—Ä–æ–∫: {custom_name or '‚Äî'}\n"
            f"Telegram: @{username if username else '‚Äî'} (ID: {user_id})\n"
            f"–°—É–º–º–∞: {amount} üíé\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è: {timestamp}\n",
            reply_markup=keyboard
        )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith('approve_') or c.data.startswith('reject_'))
async def process_callback(callback_query: CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    data = callback_query.data
    if data.startswith('approve_'):
        request_id = int(data.split('_')[1])
        status = 'approved'
    elif data.startswith('reject_'):
        request_id = int(data.split('_')[1])
        status = 'rejected'
    else:
        return

    user_id, amount = get_request_user_id(request_id)
    if not user_id:
        await callback_query.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    update_request_status(request_id, status)

    if status == 'approved':
        update_points(user_id, -amount)
        user_notification = f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} –ê—Ä –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!"
    else:
        user_notification = f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} –ê—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."

    try:
        await bot.send_message(user_id, user_notification)
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

    await callback_query.answer(f"–ó–∞–ø—Ä–æ—Å #{request_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {status}.")
    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=None
    )

@dp.message(StateFilter(GameStates.waiting))
async def guess_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    add_or_update_user(user_id, message.from_user.username or message.from_user.first_name)

    try:
        user_guess = int(message.text.strip())
        if user_guess < 1 or user_guess > 6:
            await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6!")
            return
    except ValueError:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.")
        return

    points = get_user_points(user_id)
    if points < 1:
        await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ê—Ä –¥–ª—è –∏–≥—Ä—ã! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 –ê—Ä üíé.")
        return

    # –°–Ω–∏–º–∞–µ–º 1 –ê—Ä –∑–∞ –∏–≥—Ä—É
    update_points(user_id, -1)
    await state.set_state(GameStates.playing)

    dice_message = await bot.send_dice(chat_id=message.chat.id, emoji="üé≤")
    await asyncio.sleep(5)
    dice_value = dice_message.dice.value

    points_before = get_user_points(user_id)
    custom_name = get_user_custom_name(user_id) or "–ò–≥—Ä–æ–∫"
    if user_guess == dice_value:
        # –ï—Å–ª–∏ —É–≥–∞–¥–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ê—Ä –∑–∞ –∏–≥—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º +1
        update_points(user_id, 2)  # +1 –∑–∞ –∏–≥—Ä—É, +1 –∑–∞ –ø–æ–±–µ–¥—É
        new_points = points_before + 2
        result = (
            f"üéâ {custom_name}, —Ç—ã —É–≥–∞–¥–∞–ª!\n"
            f"–¢–≤–æ–µ —á–∏—Å–ª–æ: {user_guess}\n"
            f"–í—ã–ø–∞–ª–æ: {dice_value}\n"
            f"–ê—Ä –∑–∞ –∏–≥—Ä—É –Ω–µ —Å–Ω—è—Ç, +1 –ê—Ä! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {new_points} üíé"
        )
    else:
        new_points = points_before
        result = (
            f"üòî {custom_name}, –Ω–µ —É–≥–∞–¥–∞–ª!\n"
            f"–¢–≤–æ–µ —á–∏—Å–ª–æ: {user_guess}\n"
            f"–í—ã–ø–∞–ª–æ: {dice_value}\n"
            f"–°–Ω—è—Ç 1 –ê—Ä –∑–∞ –∏–≥—Ä—É. –¢–≤–æ–∏ –ê—Ä: {new_points} üíé\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!"
        )

    await message.answer(result)
    await state.set_state(GameStates.waiting)

@dp.message(StateFilter(GameStates.withdraw_amount))
async def withdraw_amount_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    custom_name = get_user_custom_name(user_id) or "–ò–≥—Ä–æ–∫"
    try:
        amount = int(message.text.strip())
        if amount < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
            return
    except ValueError:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    points = get_user_points(user_id)
    if amount > points:
        await message.answer(f"‚ùå –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ {points} –ê—Ä!")
        return

    request_id = create_withdraw_request(user_id, amount)

    username = message.from_user.username or "‚Äî"
    await bot.send_message(
        ADMIN_ID,
        f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #{request_id}:\n"
        f"–ò–≥—Ä–æ–∫: {custom_name}\n"
        f"Telegram: @{username} (ID: {user_id})\n"
        f"–°—É–º–º–∞: {amount} üíé\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /requests –∏–ª–∏ /requests_list –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )

    await message.answer(
        f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} –ê—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ñ–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
        f"–¢–≤–æ–∏ –ê—Ä –ø–æ–∫–∞: {points} üíé"
    )
    await state.set_state(GameStates.waiting)

@dp.message(StateFilter(GameStates.playing))
async def busy_handler(message: Message):
    await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏, –∫—É–±–∏–∫ –µ—â—ë –∫—Ä—É—Ç–∏—Ç—Å—è!")

@dp.message()
async def default_handler(message: Message):
    await message.answer("ü§î –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

# -------------------- –ó–ê–ü–£–°–ö --------------------

async def main():
    init_db()
    await set_bot_commands()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())